#nullable enable
// -------------------------------------------------------------------
//  Constants 
// -------------------------------------------------------------------
private const string MONOGAME_ASEPRITE_SLN_PATH = "../MonoGame.Aseprite.sln";

private const string DEFAULT_DOC_PLUGIN_PROJ_PATH = "../source/DefaultDocumentation.Plugin/DefaultDocumentation.Plugin.csproj";
private const string MONOGAME_ASEPRITE_PROJ_PATH = "../source/MonoGame.Aseprite/MonoGame.Aseprite.csproj";
private const string MONOGAME_ASEPRITE_COMMON_PROJ_PATH = "../source/MonoGame.Aseprite.Common/MonoGame.Aseprite.Common.csproj";
private const string MONOGAME_ASEPRITE_CONTENT_PIPELINE_PROJ_PATH = "../source/Monogame.Aseprite.Content.Pipeline/MonoGame.Aseprite.Content.Pipeline.csproj";
private const string MONOGAME_ASEPRITE_COMMON_TEST_PROJ_PATH = "../tests/MonoGame.Aseprite.Common.Tests/MonoGame.Aseprite.Common.Tests.csproj";

// -------------------------------------------------------------------
//  Arguments
//      -   Values provided through arguments when calling 
//          `dotnet cake` (e.g. `dotnet cake --target=Docs`)
// -------------------------------------------------------------------
private string _target = Argument("target", "All");
private bool _docs = HasArgument("docs");
private bool _incrementBuild = HasArgument("increment-build");
private string _outputDirectory = Argument("output-directory", "../Artifacts");
private string _configuration = Argument("configuration", "Debug");
private bool _noRestore = HasArgument("no-restore");
private bool _noClean = HasArgument("no-clean");

// -------------------------------------------------------------------
//  Setup
//      -   Values initialized during the Setup task
// -------------------------------------------------------------------
private string _version;
private string _githubRepositoryUrl;
DotNetMSBuildSettings _dotnetMsBuildSettings;

// -------------------------------------------------------------------
//  Helpers
//      -   Helper methods used by tasks.
// -------------------------------------------------------------------
//  Toggles the <GenerateDocumentationFile> tag in each project
private void ToggleGenerateDocuments(bool value)
{
    XmlPoke(MONOGAME_ASEPRITE_PROJ_PATH, "//GenerateDocumentationFile", $"{value}");
    XmlPoke(MONOGAME_ASEPRITE_COMMON_PROJ_PATH, "//GenerateDocumentationFile", $"{value}");
    XmlPoke(MONOGAME_ASEPRITE_CONTENT_PIPELINE_PROJ_PATH, "//GenerateDocumentationFile", $"{value}");
}

//  Parses the version number from the Directory.Build.props file, and if the --increment-build argument
//  was passed in, will increment the build number of the version.

private void ParseVersion()
{
    string xmlValue = XmlPeek("../source/Directory.Build.props", "//Version");
    Version assemblyVersion = new(xmlValue);

    if(_incrementBuild)
    {
        assemblyVersion = new(assemblyVersion.Major, assemblyVersion.Minor, assemblyVersion.Build + 1);
        XmlPoke("../source/Directory.Build.props", "//Version", assemblyVersion.ToString());
    }

    string? suffix = ParseSuffix();

    _version = $"{assemblyVersion}{suffix}";
    Console.WriteLine(_version);
}

//  Helper used by the ParseVersion method that parses the suffix to append to the version number
//  -   When running in Github Actions environment
//          -   If this is running in the original repo, returns "-develop"
//          -   If this is running on a fork, return "-[repo_owner_name]
//  -   When running local
//      - If branch is not the stable branch, returns "-develop"
//  -   If no other conditions above are met, returns null, meaning no suffix appended.
private string? ParseSuffix()
{
    if(HasEnvironmentVariable("GITHUB_ACTIONS"))
    {
        string? repo = EnvironmentVariable("GITHUB_REPOSITORY");

        if(repo != "AristurtleDev/monogame-aseprite")
        {
            string? repoOwner = EnvironmentVariable("GITHUB_REPOSITORY_OWNER");
            return $"-{repoOwner}";
        }

        string? ghRefType = EnvironmentVariable("GITHUB_REF_TYPE");
        string? ghRef = EnvironmentVariable("GITHUB_REF");

        if(ghRefType == "branch" && ghRef != "refs/head/stable")
        {
            return "-develop";
        }
    }

    if(EnvironmentVariable("BRANCH_NAME", string.Empty) != "stable")
    {
        return "-develop";
    }

    return null;
}

//  Initializes the DotNetBuildSettings that is used by everything that performs a build
private void InitializeBuildSettings()
{
    _dotnetMsBuildSettings = new();
    _dotnetMsBuildSettings.WithProperty("Version", _version);
}

//  Parses the URL of the repository the project is hosted in
//      -   When in the GitHub Actions environment, uses the GITHUB_REPOSITORY
//      -   otherwise, uses the main repository path.
private void ParseRepositoryUrl()
{
    _githubRepositoryUrl = "https://github.com/{0}";

    string repositoryPath = "AristurtleDev/monogame-aseprite";

    if(HasEnvironmentVariable("GITHUB_ACTIONS"))
    {
        repositoryPath = EnvironmentVariable("GITHUB_REPOSITORY", repositoryPath);
    }

    _githubRepositoryUrl = string.Format(_githubRepositoryUrl, repositoryPath);
    Console.WriteLine($"Repository URL: {_githubRepositoryUrl}");
}

//  Performs a `dotnet clean` on the main projects
//      -   MonoGame.Aseprite
//      -   MonoGame.Aseprite.Common
//      -   MonoGame.Aseprite.Content.Pipeline
//      -   MonoGame.Aseprite.Common.Tests
//  When finished, cleans the output directory that artifacts from this cake script are placed in.
private void CleanTask()
{
    DotNetClean("../Monogame.Aseprite.sln");
    // DotNetClean(MONOGAME_ASEPRITE_COMMON_PROJ_PATH);
    // DotNetClean(MONOGAME_ASEPRITE_CONTENT_PIPELINE_PROJ_PATH);
    // DotNetClean(MONOGAME_ASEPRITE_PROJ_PATH);
    // DotNetClean(MONOGAME_ASEPRITE_COMMON_TESTS_PROJ_PATH);
    CleanDirectories(_outputDirectory);
}

//  Performs a `dotnet restore` on the main projects
//      -   MonoGame.Aseprite
//      -   MonoGame.Aseprite.Common
//      -   MonoGame.Aseprite.Content.Pipeline
//      -   MonoGame.Aseprite.Common.Tests
//  When finished, sets the _noRestore flag to true so that builds after restore skip restoring again.
private void RestoreTask()
{
    DotNetRestore(MONOGAME_ASEPRITE_PROJ_PATH);
    DotNetRestore(MONOGAME_ASEPRITE_COMMON_TEST_PROJ_PATH);
    _noRestore = true;
}

//  Performs a `dotnet build` on the main projects
//      -   MonoGame.Aseprite
//      -   MonoGame.Aseprite.Common
//      -   Monogame.Aseprite.Content.Pipeline
private void BuildTask()
{
    DotNetBuildSettings settings = new();
    settings.MSBuildSettings = _dotnetMsBuildSettings;
    settings.NoRestore = _noRestore;
    settings.Configuration = _configuration;
    settings.OutputDirectory = System.IO.Path.Combine(_outputDirectory, _configuration, "Build");
    
    DotNetBuild(MONOGAME_ASEPRITE_COMMON_PROJ_PATH, settings);
    DotNetBuild(MONOGAME_ASEPRITE_CONTENT_PIPELINE_PROJ_PATH, settings);
    DotNetBuild(MONOGAME_ASEPRITE_PROJ_PATH, settings);
}

private void TestTask()
{
    DotNetTestSettings settings = new();
    settings.MSBuildSettings = _dotnetMsBuildSettings;
    settings.NoRestore = _noRestore;
    settings.Configuration = _configuration;    

    DotNetTest(MONOGAME_ASEPRITE_COMMON_TEST_PROJ_PATH, settings);
}

private void PackTask()
{
    DotNetPackSettings settings = new();
    settings.MSBuildSettings = _dotnetMsBuildSettings;
    settings.NoRestore = _noRestore;
    settings.Configuration = _configuration;
    settings.OutputDirectory = System.IO.Path.Combine(_outputDirectory, _configuration, "NuGet");

    DotNetPack(MONOGAME_ASEPRITE_PROJ_PATH, settings);
}

private void MonoGameAsepriteDocTask()
{
    DotNetRestore(MONOGAME_ASEPRITE_PROJ_PATH);
    
    DotNetToolSettings settings = new();
    settings.ArgumentCustomization = (builder) =>
    {
        builder.AppendSwitchQuoted("--AssemblyFilePath", $"../Artifacts/{_configuration}/Build/MonoGame.Aseprite.dll");
        builder.AppendSwitchQuoted("--DocumentationFilePath", $"../Artifacts/{_configuration}/build/MonoGame.Aseprite.xml");
        builder.AppendSwitchQuoted("--ProjectDirectoryPath", MONOGAME_ASEPRITE_PROJ_PATH);
        builder.AppendSwitchQuoted("--OutputDirectoryPath", "../Artifacts/Documentation/MonoGame.Aseprite");
        builder.AppendSwitchQuoted("--ConfigurationFilePath", "./DefaultDocumentation.json");
        builder.AppendSwitchQuoted("--AssemblyPageName", "MonoGame.Aseprite");
        builder.AppendSwitchQuoted("--Plugins", $"./DefaultDocumentation.Plugin/bin/{_configuration}/DefaultDocumentation.Plugin.dll");

        return builder;
    };

    DotNetTool("defaultdocumentation", settings);
}


private void MonoGameAsepriteCommonDocTask()
{
    DotNetToolSettings settings = new();
    settings.ArgumentCustomization = (builder) =>
    {
        builder.AppendSwitchQuoted("--AssemblyFilePath", $"../Artifacts/{_configuration}/Build/MonoGame.Aseprite.Common.dll");
        builder.AppendSwitchQuoted("--DocumentationFilePath", $"../Artifacts/{_configuration}/build/MonoGame.Aseprite.Common.xml");
        builder.AppendSwitchQuoted("--ProjectDirectoryPath", MONOGAME_ASEPRITE_COMMON_PROJ_PATH);
        builder.AppendSwitchQuoted("--OutputDirectoryPath", "../Artifacts/Documentation/MonoGame.Aseprite.Common");
        builder.AppendSwitchQuoted("--ConfigurationFilePath", "./DefaultDocumentation.json");
        builder.AppendSwitchQuoted("--AssemblyPageName", "MonoGame.Aseprite.Common");
        builder.AppendSwitchQuoted("--Plugins", $"./DefaultDocumentation.Plugin/bin/{_configuration}/DefaultDocumentation.Plugin.dll");


        return builder;
    };

    DotNetTool("defaultdocumentation", settings);
}

private void MonoGameAsepriteContentPipelineTask()
{
    DotNetToolSettings settings = new();
    settings.ArgumentCustomization = (builder) =>
    {
        builder.AppendSwitchQuoted("--AssemblyFilePath", $"../Artifacts/{_configuration}/Build/MonoGame.Aseprite.Content.Pipeline.dll");
        builder.AppendSwitchQuoted("--DocumentationFilePath", $"../Artifacts/{_configuration}/build/MonoGame.Aseprite.Content.Pipeline.xml");
        builder.AppendSwitchQuoted("--ProjectDirectoryPath", MONOGAME_ASEPRITE_CONTENT_PIPELINE_PROJ_PATH);
        builder.AppendSwitchQuoted("--OutputDirectoryPath", "../Artifacts/Documentation/MonoGame.Aseprite.Content.Pipeline");
        builder.AppendSwitchQuoted("--ConfigurationFilePath", "./DefaultDocumentation.json");
        builder.AppendSwitchQuoted("--AssemblyPageName", "MonoGame.Aseprite.Content.Pipeline");
        builder.AppendSwitchQuoted("--Plugins", $"./DefaultDocumentation.Plugin/bin/{_configuration}/DefaultDocumentation.Plugin.dll");

        return builder;
    };

    DotNetTool("defaultdocumentation", settings);}

private void DocsTask()
{
    DotNetBuildSettings settings = new();
    settings.MSBuildSettings = _dotnetMsBuildSettings;
    settings.NoRestore = true;
    settings.Configuration = _configuration;
    DotNetBuild("./DefaultDocumentation.Plugin/DefaultDocumentation.Plugin.csproj", settings);

    MonoGameAsepriteDocTask();
    MonoGameAsepriteCommonDocTask();
    MonoGameAsepriteContentPipelineTask();

}

//////////////////////////////////////////////////////////////////////
// Tasks
//////////////////////////////////////////////////////////////////////
Setup((context) =>
{
    if(_target == "Docs" || _docs)
    {
        ToggleGenerateDocuments(true);
    }

    ParseVersion();
    ParseRepositoryUrl();
    InitializeBuildSettings();
});

Teardown((context) =>
{
    if(_target == "Docs" || _docs)
    {
        ToggleGenerateDocuments(false);
    }
});

Task("Clean")
.Description("Cleans up existing artifacts for both the MonoGame.Aseprite project and the output from these cake scripts")
.WithCriteria(!_noClean)
.Does(CleanTask);

Task("Restore")
.Description("Performs a dotnet restore on the MonoGame.Aseprite project. Does not run when --no-restore specified")
.WithCriteria(!_noRestore)
.Does(RestoreTask);


Task("Build")
.Description("Builds the MonoGame.Aseprite project")
.Does(BuildTask);

Task("Test")
.Description("Executes the tests for the MonoGame.Aseprite project")
.IsDependentOn("Build")
.Does(TestTask);

Task("Pack")
.Description("Performs the dotnet pack command for the MonoGame.Aseprite project")
.IsDependentOn("Build").
Does(PackTask);

Task("Docs")
.IsDependentOn("Clean")
.IsDependentOn("Restore")
.IsDependentOn("Build")
.WithCriteria((_target == "All" && _docs) || (_target == "Docs"))
.Description("Generates the Markdown documentation for each projects")
.Does(DocsTask);


Task("All").IsDependentOn("Clean")
           .IsDependentOn("Restore")
           .IsDependentOn("Build")
           .IsDependentOn("Test")
           .IsDependentOn("Pack")
           .IsDependentOn("Docs");

//////////////////////////////////////////////////////////////////////
// EXECUTION
//////////////////////////////////////////////////////////////////////

RunTarget(_target);